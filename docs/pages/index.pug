include _layout

doctype
html(lang="en-US")
  +head("Connect Four")
    script#users-template(type="text/x-template")
      .users
        .icon
          transition(name="switch" mode="out-in")
            i.material-icons(v-if="users > 1"   key="many") people
            i.material-icons(v-if="users === 1" key="one") person
            i.material-icons(v-if="!users"      key="none") warning
        .text {{ users }} other {{ users === 1 ? "player" : "players" }} online.
    script#modal-template(type="text/x-template")
      .modal
        header.section.header
          section.title
            .icon(:class="{'-rotating': !!modal.iconRotation, '-counter-clockwise': modal.iconRotation === -1, '-clockwise': modal.iconRotation === 1}")
              i.material-icons(v-if="modal.icon") {{ modal.icon }}
            .text
              span {{ modal.title }}
          button(v-if="!modal.priority" @click="close().onclose()")
            i.material-icons highlight_off
        article.section.content
          .text(v-if="modal.text")
            p(v-html="modal.text")
        footer.section.footer(v-if="modal.input || modal.buttons")
          section.input(v-if="modal.input")
            input(:placeholder="modal.input.placeholder" v-bind:maxlength="modal.input.maxlength" v-model="modal.input.value")
          section.buttons(v-if="modal.buttons")
            button.-modal(v-for="button in modal.buttons" key="buttons" v-bind:class="{'-danger': button.flag === 'danger', '-emphasis': button.flag === 'emphasis'}" @click="close() && button.onclick && button.onclick()") {{ button.text }}
  +body
    header#top
      .players
        .player(v-for="(player, index) in players" v-bind:class="{'me': player.hash === hash}")
          div.piece(v-bind:class="{'-white': index === 0, '-black': index === 1, '-ghost': turn !== index && !ended, '-gray': ended && index !== winner}")
          div.text
            span.name(@click="connected && requestUser(player.hash)") {{ player.name }}
            span.hash {{ "#" + player.hash }}
      .versus vs.
    .whitespace
    .game(v-bind:class="{'-waiting': waiting, '-ended': ended}")
      .board
        transition(name="layer")
          .layer.-winner(v-if='ended')
            .overlay
            .content
              .text
                .title(v-if="winner === null")
                  i.material-icons star_half
                  span Tie game!
                .title(v-else)
                  i.material-icons(v-if="players[winner].hash !== hash") star_border
                  i.material-icons(v-if="players[winner].hash === hash") star
                  span Player {{ winner + 1 }} wins!
              button.-modal.-emphasis(:class="{'-inactive': !canRequest}" @click="canRequest && requestRematch()") Rematch
        transition(name="layer")
          .layer.-loading(v-if="queueing")
            .overlay
            .content
              .loading
                .icon
                  i.material-icons refresh
                .text Waiting for opponent...
              button.-modal.-danger(@click="unqueue") Cancel
            users(:users="users - 1")
        .columns
          .column(v-for="(column, col) in board" @click="!waiting && dropPiece(col)")
            .pieces
              .piece.-ghost(v-if="!waiting && column[0] === null" v-bind:class="{'-white': !turn, '-black': turn}")
              transition-group(name="shrink" v-on:enter="fall")
                .piece(v-for="(piece, row) in column" v-if="piece !== null" v-bind:class="{'-white': !piece, '-black': piece, '-gray': ended && matching.indexOf(col + ',' + row) === -1}" v-bind:key="col + ',' + row")
    transition(name="layer")
      .layer.-modal(v-if="modal")
        .overlay(@click="!modal.priority && closeModal().onclose()")
        modal(v-bind:modal="modal" v-bind:close="closeModal" v-bind:users="users - 1")
    #buttons
      .group
        button(v-bind:class="{'-selected': index === i, '-inactive': button.id === 'online' && !connected || button.id !== 'online' && queueing}" v-bind:tooltip="button.text" v-bind:id="'button-' + button.id" @click="index !== i && setIndex(i)" v-for="(button, i) in buttons")
          i.material-icons {{ button.icon }}
      button(v-bind:class="{'-inactive': !canReset}" tooltip="Reset" @click="canReset && reset()")
        i.material-icons replay
